import streamlit as st
import os

# --- C·∫§U H√åNH ---
VIDEO_FOLDER = "videos"

# --- 1. GI·ªöI H·∫†N SINH H·ªåC ---
MAX_HEIGHT = 30.0  # cm, ph√°t tri·ªÉn t·ªëi ƒëa
MIN_HEIGHT = 5.0   # cm, ph√°t tri·ªÉn th·∫•p nh·∫•t

# --- 2. H√ÄM D·ª∞ ƒêO√ÅN KI·ªÇU H√åNH ---
def predict_growth(water, fertilizer, light):
    """
    M√¥ ph·ªèng bi·ªÉu hi·ªán th∆∞·ªùng bi·∫øn c·ªßa c√¢y tr·ªìng.
    Ba y·∫øu t·ªë: N∆∞·ªõc, Ph√¢n, √Ånh s√°ng.
    M·ªói y·∫øu t·ªë c√≥ m·ª©c ·∫£nh h∆∞·ªüng phi tuy·∫øn (logistic) ƒë·∫øn tƒÉng tr∆∞·ªüng.
    """

    # Chu·∫©n h√≥a gi√° tr·ªã (ƒë∆∞a v·ªÅ thang 0‚Äì1)
    water_score = min(water / 500, 1.0)
    fertilizer_score = min(fertilizer / 5.0, 1.0)
    light_score = min(light / 10.0, 1.0)

    # T√≠nh ƒëi·ªÉm tƒÉng tr∆∞·ªüng t·ªïng h·ª£p (gi√° tr·ªã phi tuy·∫øn, c√≥ t∆∞∆°ng t√°c)
    growth_index = (0.4 * water_score**1.2 +
                    0.3 * fertilizer_score**1.1 +
                    0.3 * light_score**1.3)

    # Quy ƒë·ªïi sang chi·ªÅu cao (cm)
    height = MIN_HEIGHT + growth_index * (MAX_HEIGHT - MIN_HEIGHT)
    height = round(height, 2)

    # --- 3. PH√ÇN LO·∫†I KI·ªÇU H√åNH ---
    if water_score < 0.5 and water_score < fertilizer_score and water_score < light_score:
        label = "WaterDeficient"
        desc = "C√¢y h√©o, c√≤i c·ªçc do thi·∫øu n∆∞·ªõc. L√° r≈© v√† t·ªëc ƒë·ªô sinh tr∆∞·ªüng ch·∫≠m."
    elif fertilizer_score < 0.5 and fertilizer_score < water_score and fertilizer_score < light_score:
        label = "NutrientDeficient"
        desc = "C√¢y k√©m ph√°t tri·ªÉn, l√° nh·∫°t m√†u do thi·∫øu dinh d∆∞·ª°ng."
    elif light_score < 0.5 and light_score < water_score and light_score < fertilizer_score:
        label = "LightDeficient"
        desc = "C√¢y m·∫£nh, √≠t l√°, do √°nh s√°ng y·∫øu. Hi·ªán t∆∞·ª£ng v∆∞∆°n d√†i ƒë·ªÉ t√¨m s√°ng."
    else:
        label = "Optimal"
        desc = "C√¢y ph√°t tri·ªÉn t·ªëi ∆∞u v·ªõi ƒëi·ªÅu ki·ªán m√¥i tr∆∞·ªùng c√¢n b·∫±ng."

    return height, label, desc

# --- 4. GIAO DI·ªÜN STREAMLIT ---
st.set_page_config(page_title="üå± M√¥ ph·ªèng th∆∞·ªùng bi·∫øn sinh h·ªçc", layout="wide")
st.title("üåø M√¥ ph·ªèng Bi·ªÉu hi·ªán Th∆∞·ªùng bi·∫øn c·ªßa C√¢y tr·ªìng")
st.caption("C√πng ki·ªÉu gen, nh∆∞ng bi·ªÉu hi·ªán ki·ªÉu h√¨nh thay ƒë·ªïi theo m√¥i tr∆∞·ªùng.")

col1, col2 = st.columns([1, 1.3])

with col1:
    st.header("‚öôÔ∏è ƒêi·ªÅu ch·ªânh y·∫øu t·ªë m√¥i tr∆∞·ªùng")

    water = st.slider("üíß N∆∞·ªõc (ml/ng√†y)", 100, 500, 300, step=10)
    fertilizer = st.slider("üåæ Ph√¢n b√≥n (g/ng√†y)", 0.0, 5.0, 2.5, step=0.1)
    light = st.slider("üå§ √Ånh s√°ng (gi·ªù/ng√†y)", 4, 10, 7, step=1)

    if st.button("üîç M√¥ ph·ªèng ph√°t tri·ªÉn", type="primary"):
        height, label, desc = predict_growth(water, fertilizer, light)
        st.session_state.update({"height": height, "label": label, "desc": desc})

        st.metric("üåø Chi·ªÅu cao d·ª± ƒëo√°n", f"{height} cm")
        st.success(f"**Tr·∫°ng th√°i sinh tr∆∞·ªüng:** {label}")

with col2:
    st.header("üéûÔ∏è K·∫øt qu·∫£ m√¥ ph·ªèng")

    if "label" in st.session_state:
        video_path = os.path.join(VIDEO_FOLDER, f"{st.session_state['label']}.mp4")

        if os.path.exists(video_path):
            st.video(video_path)
        else:
            st.warning(f"‚ö†Ô∏è Ch∆∞a t√¨m th·∫•y video cho {st.session_state['label']} trong th∆∞ m·ª•c {VIDEO_FOLDER}/")

        st.markdown(f"**Ph√¢n t√≠ch:** {st.session_state['desc']}")
        st.markdown(f"**Gi·ªõi h·∫°n sinh h·ªçc:** {MIN_HEIGHT} ‚Äì {MAX_HEIGHT} cm")
    else:
        st.info("Ch·ªçn ƒëi·ªÅu ki·ªán v√† nh·∫•n 'M√¥ ph·ªèng ph√°t tri·ªÉn' ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
